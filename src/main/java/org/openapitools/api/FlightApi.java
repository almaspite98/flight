/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Flight;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-15T21:12:04.614312100+01:00[Europe/Prague]")
@Validated
@Api(value = "flight", description = "the flight API")
public interface FlightApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /flight : Add a new flight to the database
     *
     * @param body Flight object that needs to be added to the database (required)
     * @return Flight created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Invalid input (status code 405)
     *         or Internal server error occured (status code 500)
     */
    @ApiOperation(value = "Add a new flight to the database", nickname = "addFlight", notes = "", authorizations = {
        
        @Authorization(value = "api_key")
         }, tags={ "flight", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Flight created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error occured") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/flight",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> addFlight(@ApiParam(value = "Flight object that needs to be added to the database", required = true) @Valid @RequestBody Flight body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /flight/{flightId} : Deletes a flight
     *
     * @param flightId Flight id to delete (required)
     * @param apiKey  (optional)
     * @return Deleted (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Flight not found (status code 404)
     *         or Internal server error occured (status code 500)
     */
    @ApiOperation(value = "Deletes a flight", nickname = "deleteFlight", notes = "", authorizations = {
        
        @Authorization(value = "api_key")
         }, tags={ "flight", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Flight not found"),
        @ApiResponse(code = 500, message = "Internal server error occured") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/flight/{flightId}"
    )
    default ResponseEntity<Void> deleteFlight(@ApiParam(value = "Flight id to delete", required = true) @PathVariable("flightId") int flightId,@ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flight/{flightId} : Find flight by ID
     * Returns a single flight
     *
     * @param flightId ID of flight to return (required)
     * @return OK (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Flight not found (status code 404)
     *         or Internal server error occured (status code 500)
     */
    @ApiOperation(value = "Find flight by ID", nickname = "getFlightById", notes = "Returns a single flight", response = Flight.class, authorizations = {
        
        @Authorization(value = "api_key")
         }, tags={ "flight", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Flight.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Flight not found"),
        @ApiResponse(code = 500, message = "Internal server error occured") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flight/{flightId}",
        produces = { "application/xml", "application/json" }
    )
    default ResponseEntity<Flight> getFlightById(@ApiParam(value = "ID of flight to return", required = true) @PathVariable("flightId") int flightId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\", \"from_city\" : \"from_city\", \"to_city\" : \"to_city\", \"id\" : 0, \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\", \"number_of_seats\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Flight> <id>123456789</id> <departure_time>2000-01-23T04:56:07.000Z</departure_time> <arrival_time>2000-01-23T04:56:07.000Z</arrival_time> <from_city>aeiou</from_city> <to_city>aeiou</to_city> <number_of_seats>123456789</number_of_seats> </Flight>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /flight : Update an existing flight
     *
     * @param body Flight object that needs to be added to the database (required)
     * @return Flight updated (status code 201)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Flight not found (status code 404)
     *         or Validation exception (status code 405)
     *         or Internal server error occured (status code 500)
     */
    @ApiOperation(value = "Update an existing flight", nickname = "updateFlight", notes = "", authorizations = {
        
        @Authorization(value = "api_key")
         }, tags={ "flight", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Flight updated"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Flight not found"),
        @ApiResponse(code = 405, message = "Validation exception"),
        @ApiResponse(code = 500, message = "Internal server error occured") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/flight",
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<Void> updateFlight(@ApiParam(value = "Flight object that needs to be added to the database", required = true) @Valid @RequestBody Flight body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
